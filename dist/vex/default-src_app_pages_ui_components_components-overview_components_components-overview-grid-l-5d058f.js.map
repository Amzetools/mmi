{"version":3,"file":"default-src_app_pages_ui_components_components-overview_components_components-overview-grid-l-5d058f.js","mappings":"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","sources":["./src/app/pages/ui/components/components-overview/components/components-overview-grid-list/components-overview-grid-list.component.ts","./src/app/pages/ui/components/components-overview/components/components-overview-grid-list/components-overview-grid-list.component.html","./src/app/pages/ui/components/components-overview/components/components-overview-grid-list/components-overview-grid-list.module.ts","./node_modules/@angular/material/fesm2020/grid-list.mjs"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'vex-components-overview-grid-list',\r\n  templateUrl: './components-overview-grid-list.component.html',\r\n  styleUrls: ['./components-overview-grid-list.component.scss']\r\n})\r\nexport class ComponentsOverviewGridListComponent implements OnInit {\r\n\r\n  tiles: any[] = [\r\n    { text: 'One', cols: 3, rows: 1, color: 'lightblue' },\r\n    { text: 'Two', cols: 1, rows: 2, color: 'lightgreen' },\r\n    { text: 'Three', cols: 1, rows: 1, color: 'lightpink' },\r\n    { text: 'Four', cols: 2, rows: 1, color: '#DDBDF1' },\r\n  ];\r\n\r\n  gridListHTML: string =\r\n    `<mat-grid-list cols=\"4\" rowHeight=\"100px\">\r\n  <mat-grid-tile *ngFor=\"let tile of tiles\" [colspan]=\"tile.cols\" [rowspan]=\"tile.rows\"\r\n                  [style.background]=\"tile.color\">\r\n      {{tile.text}}\r\n  </mat-grid-tile>\r\n</mat-grid-list>`;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n","<div class=\"card flex flex-col sm:flex-row\">\r\n  <div class=\"p-6\">\r\n    <mat-grid-list class=\"w-64 max-w-full flex-1\" cols=\"4\" rowHeight=\"100px\">\r\n      <mat-grid-tile *ngFor=\"let tile of tiles\" [colspan]=\"tile.cols\" [rowspan]=\"tile.rows\"\r\n                     [style.background]=\"tile.color\">\r\n        {{ tile.text }}\r\n      </mat-grid-tile>\r\n    </mat-grid-list>\r\n  </div>\r\n\r\n  <div class=\"border-l flex-1\">\r\n    <div class=\"p-6\">\r\n      <h2 class=\"title mt-0 mb-4\">Grid List</h2>\r\n      <h4 class=\"body-2 text-secondary m-0\">&lt;mat-grid-list&gt;</h4>\r\n    </div>\r\n\r\n    <mat-tab-group class=\"vex-tabs\">\r\n      <mat-tab label=\"DESCRIPTION\">\r\n        <p class=\"p-6\">\r\n          A grid list consists of a repeated pattern of cells arrayed in a vertical and horizontal layout.\r\n          <br>\r\n          <br>Grid lists are best used on similar data types. They help improve the visual comprehension of the content\r\n          they contain.\r\n        </p>\r\n      </mat-tab>\r\n      <mat-tab label=\"SOURCE CODE\">\r\n        <pre><code [vexHighlight]=\"gridListHTML\"></code></pre>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </div>\r\n</div>\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ComponentsOverviewGridListComponent } from './components-overview-grid-list.component';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { HighlightModule } from '../../../../../../../@vex/components/highlight/highlight.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ComponentsOverviewGridListComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatGridListModule,\r\n    MatTabsModule,\r\n    HighlightModule\r\n  ],\r\n  exports: [ComponentsOverviewGridListComponent]\r\n})\r\nexport class ComponentsOverviewGridListModule {\r\n}\r\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() {\n        return this.rowIndex + 1;\n    }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0);\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridTile {\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() {\n        return this._rowspan;\n    }\n    set rowspan(value) {\n        this._rowspan = Math.round(coerceNumberProperty(value));\n    }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() {\n        return this._colspan;\n    }\n    set colspan(value) {\n        this._colspan = Math.round(coerceNumberProperty(value));\n    }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n}\nMatGridTile.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridTile, deps: [{ token: i0.ElementRef }, { token: MAT_GRID_LIST, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatGridTile.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatGridTile, selector: \"mat-grid-tile\", inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, host: { properties: { \"attr.rowspan\": \"rowspan\", \"attr.colspan\": \"colspan\" }, classAttribute: \"mat-grid-tile\" }, exportAs: [\"matGridTile\"], ngImport: i0, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridTile, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile', exportAs: 'matGridTile', host: {\n                        'class': 'mat-grid-tile',\n                        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                        // the DOM. This is needed for the grid-tile harness.\n                        '[attr.rowspan]': 'rowspan',\n                        '[attr.colspan]': 'colspan',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_GRID_LIST]\n                }] }]; }, propDecorators: { rowspan: [{\n                type: Input\n            }], colspan: [{\n                type: Input\n            }] } });\nclass MatGridTileText {\n    constructor(_element) {\n        this._element = _element;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridTileText, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nMatGridTileText.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatGridTileText, selector: \"mat-grid-tile-header, mat-grid-tile-footer\", queries: [{ propertyName: \"_lines\", predicate: MatLine, descendants: true }], ngImport: i0, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\", changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridTileText, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile-header, mat-grid-tile-footer', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { _lines: [{\n                type: ContentChildren,\n                args: [MatLine, { descendants: true }]\n            }] } });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridAvatarCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatGridAvatarCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatGridAvatarCssMatStyler, selector: \"[mat-grid-avatar], [matGridAvatar]\", host: { classAttribute: \"mat-grid-avatar\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridAvatarCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-grid-avatar], [matGridAvatar]',\n                    host: { 'class': 'mat-grid-avatar' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatGridTileHeaderCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatGridTileHeaderCssMatStyler, selector: \"mat-grid-tile-header\", host: { classAttribute: \"mat-grid-tile-header\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-header',\n                    host: { 'class': 'mat-grid-tile-header' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridTileFooterCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatGridTileFooterCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatGridTileFooterCssMatStyler, selector: \"mat-grid-tile-footer\", host: { classAttribute: \"mat-grid-tile-footer\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridTileFooterCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-footer',\n                    host: { 'class': 'mat-grid-tile-footer' },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() {\n        return null;\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom',\n            calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`),\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n        this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n    get cols() {\n        return this._cols;\n    }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() {\n        return this._gutter;\n    }\n    set gutterSize(value) {\n        this._gutter = `${value == null ? '' : value}`;\n    }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() {\n        return this._rowHeight;\n    }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridList, deps: [{ token: i0.ElementRef }, { token: i1.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatGridList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatGridList, selector: \"mat-grid-list\", inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, host: { properties: { \"attr.cols\": \"cols\" }, classAttribute: \"mat-grid-list\" }, providers: [\n        {\n            provide: MAT_GRID_LIST,\n            useExisting: MatGridList,\n        },\n    ], queries: [{ propertyName: \"_tiles\", predicate: MatGridTile, descendants: true }], exportAs: [\"matGridList\"], ngImport: i0, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-list', exportAs: 'matGridList', host: {\n                        'class': 'mat-grid-list',\n                        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                        // needed for the grid-list harness.\n                        '[attr.cols]': 'cols',\n                    }, providers: [\n                        {\n                            provide: MAT_GRID_LIST,\n                            useExisting: MatGridList,\n                        },\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { _tiles: [{\n                type: ContentChildren,\n                args: [MatGridTile, { descendants: true }]\n            }], cols: [{\n                type: Input\n            }], gutterSize: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatGridListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridListModule, declarations: [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler], imports: [MatLineModule, MatCommonModule], exports: [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatLineModule,\n        MatCommonModule,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler] });\nMatGridListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridListModule, imports: [MatLineModule, MatCommonModule, MatLineModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatGridListModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatLineModule, MatCommonModule],\n                    exports: [\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatLineModule,\n                        MatCommonModule,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                    declarations: [\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator };\n"],"names":["i0","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","Input","ContentChildren","Directive","NgModule","setLines","MatLine","MatLineModule","MatCommonModule","coerceNumberProperty","i1","TileCoordinator","constructor","columnIndex","rowIndex","rowCount","rowspan","lastRowMax","Math","max","tracker","update","numColumns","tiles","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","ngDevMode","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","MAT_GRID_LIST","MatGridTile","_element","_gridList","_rowspan","_colspan","value","round","_setStyle","property","nativeElement","style","ɵfac","ElementRef","ɵcmp","type","args","selector","exportAs","host","encapsulation","None","changeDetection","OnPush","template","styles","undefined","decorators","MatGridTileText","ngAfterContentInit","_lines","descendants","MatGridAvatarCssMatStyler","ɵdir","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","rowHeight","_rowHeight","newValue","_setTileStyler","ngOnInit","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","_tileStyler","_tileCoordinator","filter","index","pos","Directionality","provide","useExisting","providers","MatGridListModule","ɵmod","ɵinj","imports","exports","declarations","ɵTileCoordinator"],"sourceRoot":"webpack:///"}